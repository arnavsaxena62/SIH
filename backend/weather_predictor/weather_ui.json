{
    "filename": "main.py",
    "code": "import tkinter as tk\nfrom tkinter import scrolledtext, messagebox\nfrom datetime import datetime, timedelta\nimport pytz\nfrom weather import get_hourly_forecast\n\nLOCAL_TZ = pytz.timezone(\"Asia/Kolkata\")\n\ndef analyze_forecast_ui(forecast, slots, output_widget):\n    output_widget.delete(1.0, tk.END)  # Clear previous output\n    now = datetime.now(LOCAL_TZ)\n    hourly = forecast.hourly\n\n    start_idx = 0\n    for i, point in enumerate(hourly):\n        point_time = datetime.fromisoformat(point.time)\n        if point_time.tzinfo is None:\n            point_time = pytz.UTC.localize(point_time).astimezone(LOCAL_TZ)\n        if point_time >= now:\n            start_idx = i\n            break\n\n    selected = hourly[start_idx:start_idx + slots]\n\n    total_rain = sum(p.precipitation_mm for p in selected)\n    max_wind = max(p.windspeed_ms for p in selected)\n    max_gust = max((p.windgust_ms for p in selected if p.windgust_ms is not None), default=0)\n\n    # --- Forecast output ---\n    output_widget.insert(tk.END, \"--- Weather Forecast ---\\n\")\n    for point in selected:\n        t = datetime.fromisoformat(point.time)\n        if t.tzinfo is None:\n            t = pytz.UTC.localize(t).astimezone(LOCAL_TZ)\n        day = t.strftime(\"%A\")\n        date = t.strftime(\"%d-%b-%Y\")\n        start = t.strftime(\"%I %p\").lstrip(\"0\")\n        end = (t + timedelta(hours=1)).strftime(\"%I %p\").lstrip(\"0\")\n        output_widget.insert(\n            tk.END,\n            f\"{day}, {date} | {start}\u2013{end}: {point.temp_c}\u00b0C, \"\n            f\"Rain: {point.precipitation_mm}mm, \"\n            f\"Wind: {point.windspeed_ms:.1f} km/hr, \"\n            f\"Gusts: {point.windgust_ms:.1f} km/hr\\n\"\n        )\n\n    # --- Alerts ---\n    output_widget.insert(tk.END, \"\\n=== Alerts ===\\n\")\n    # Rain/flood alerts\n    if total_rain >= 50:\n        output_widget.insert(tk.END, f\"\u26a0\ufe0f High flood risk: {total_rain:.1f} mm rain expected in {slots}h\\n\")\n    elif total_rain >= 30:\n        output_widget.insert(tk.END, f\"\u26a0\ufe0f Moderate flood risk: {total_rain:.1f} mm rain expected\\n\")\n    else:\n        output_widget.insert(tk.END, \"\u2705 Low flood risk\\n\")\n\n    # Wind alerts\n    if max_gust >= 25 or max_wind >= 20:\n        output_widget.insert(tk.END, f\"\ud83c\udf2a\ufe0f Storm warning: Winds up to {max_gust:.1f} km/hr\\n\")\n    elif max_gust >= 15:\n        output_widget.insert(tk.END, f\"\ud83d\udca8 Strong winds: Gusts up to {max_gust:.1f} km/hr\\n\")\n    else:\n        output_widget.insert(tk.END, \"\u2705 No severe wind expected\\n\")\n\n    # All-clear if both rain and wind are low\n    if total_rain <= 5 and max_wind <= 15:\n        output_widget.insert(tk.END, \"\u2705 All clear: No major risks detected.\\n\")\n\ndef fetch_forecast(city_entry, hours_entry, output_widget):\n    city = city_entry.get().strip() or \"Kochi\"\n    try:\n        slots = int(hours_entry.get() or 24)\n        if slots <= 0:\n            raise ValueError\n    except ValueError:\n        messagebox.showwarning(\"Input Warning\", \"Invalid hours entered. Using default 24 hours.\")\n        slots = 24\n\n    forecast = get_hourly_forecast(city, slots)\n    if forecast:\n        analyze_forecast_ui(forecast, slots, output_widget)\n    else:\n        messagebox.showerror(\"Error\", f\"Could not fetch forecast for '{city}'.\")\n\n# --- Tkinter UI ---\nroot = tk.Tk()\nroot.title(\"Weather Forecast\")\nroot.geometry(\"700x500\")\n\ntk.Label(root, text=\"City:\").grid(row=0, column=0, padx=5, pady=5, sticky=\"w\")\ncity_entry = tk.Entry(root, width=30)\ncity_entry.grid(row=0, column=1, padx=5, pady=5)\n\ntk.Label(root, text=\"Hours to forecast:\").grid(row=1, column=0, padx=5, pady=5, sticky=\"w\")\nhours_entry = tk.Entry(root, width=10)\nhours_entry.grid(row=1, column=1, padx=5, pady=5, sticky=\"w\")\n\nfetch_btn = tk.Button(root, text=\"Get Forecast\", command=lambda: fetch_forecast(city_entry, hours_entry, output_widget))\nfetch_btn.grid(row=2, column=0, columnspan=2, pady=10)\n\noutput_widget = scrolledtext.ScrolledText(root, width=85, height=25)\noutput_widget.grid(row=3, column=0, columnspan=2, padx=10, pady=10)\n\nroot.mainloop()"
}